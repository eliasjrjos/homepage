{"version":3,"sources":["assets/images/flash.jpg","CustomHooKs/useFetch.js","components/weather/weather.component.jsx","components/location/location.component.jsx","components/time/time.component.jsx","components/form-input/form-input.component.jsx","components/custom-button/custom-button.component.jsx","components/sign-in/sign-in.component.jsx","pages/loadpage/loadpage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useFetch","url","useState","data","setData","useEffect","a","fetch","apiRes","ok","json","resJSON","loadData","Weather","className","main","temp","weather","Location","city","country_name","country_capital","country_code2","Time","hour","minute","second","ampm","time","setTime","setInterval","now","Date","getHours","getMinutes","getSeconds","slice","FormInput","handleChange","label","otherProps","onChange","value","length","CustomButton","children","isGoogleSignIn","SignIn","props","handleSubmit","event","preventDefault","handleLogin","state","email","password","setState","target","name","onSubmit","this","type","required","React","Component","LoadPage","localStorage","getItem","user","setUser","imageUrl","defaultImage","setItem","substr","indexOf","style","backgroundImage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a8691c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flash.30e2a4f2.jpg\";","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    async function loadData() {\r\n      const apiRes = await fetch(url);\r\n      if (!apiRes.ok) {\r\n        // oups! something went wrong\r\n        return;\r\n      }\r\n\r\n      const resJSON = await apiRes.json();\r\n      setData(resJSON);\r\n    }\r\n\r\n    loadData();\r\n  }, [url]);\r\n  return data;\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./weather.styles.scss\";\r\n\r\nimport useFetch from \"../../CustomHooKs/useFetch\";\r\n\r\nexport default function Weather({ url }) {\r\n  const data = useFetch(url);\r\n\r\n  if (data === null) {\r\n    return (\r\n      <div className=\"weather\">\r\n        <p className=\"wth-info\">Loading...</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"weather\">\r\n        <p className=\"wth-info\">{data.main.temp} CÙ’</p>\r\n        <p className=\"wth-info\">{data.weather[0].main}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./location.styles.scss\";\r\n\r\nimport Weather from \"../weather/weather.component\";\r\nimport useFetch from \"../../CustomHooKs/useFetch\";\r\n\r\nexport default function Location({ url }) {\r\n  const data = useFetch(url);\r\n  if (data === null) {\r\n    return (\r\n      <div className=\"geo-information\">\r\n        <div className=\"location\">\r\n          <p className=\"loc-info\">Loading...</p>\r\n        </div>\r\n        <Weather url=\"\" />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"geo-information\">\r\n        <div className=\"location\">\r\n          <p className=\"loc-info\">{data.city}</p>\r\n          <p className=\"loc-info\">{data.country_name}</p>\r\n        </div>\r\n        <Weather\r\n          url={`http://api.openweathermap.org/data/2.5/weather?q=${data.country_capital}, ${data.country_code2}&units=metric&APPID=b375cf092bf8ec54a7b05c1f95e8747c`}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./time.styles.scss\";\r\n\r\nexport default function Time() {\r\n  const [time, setTime] = useState({\r\n    hour: \"\",\r\n    minute: \"\",\r\n    second: \"\",\r\n    ampm: \"\",\r\n  });\r\n\r\n  setInterval(() => {\r\n    let now = new Date();\r\n    setTime({\r\n      hour:\r\n        now.getHours() === 0\r\n          ? 12\r\n          : now.getHours() > 12\r\n          ? now.getHours() - 12\r\n          : now.getHours(),\r\n      minute: now.getMinutes(),\r\n      second: now.getSeconds(),\r\n      ampm: now.getHours() < 12 ? \"AM\" : \"PM\",\r\n    });\r\n  }, 1000);\r\n\r\n  return (\r\n    <div className=\"time\">\r\n      <p className=\"unit\">{(\"00\" + time.hour).slice(-2)}</p>\r\n      <p className=\"unit\">{(\"00\" + time.minute).slice(-2)}</p>\r\n      <p className=\"unit\">{(\"00\" + time.second).slice(-2)}</p>\r\n      <p className=\"unit\">{(\"--\" + time.ampm).slice(-2)}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./form-input.styles.scss\";\r\n\r\nconst FormInput = ({ handleChange, label, ...otherProps }) => (\r\n  <div className=\"group\">\r\n    <input className=\"form-input\" onChange={handleChange} {...otherProps} />\r\n    {label ? (\r\n      <label\r\n        className={`${\r\n          otherProps.value.length ? \"shrink\" : \"\"\r\n        } form-input-label`}\r\n      >\r\n        {label}\r\n      </label>\r\n    ) : null}\r\n  </div>\r\n);\r\n\r\nexport default FormInput;\r\n","import React from \"react\";\r\n\r\nimport \"./custom-button.styles.scss\";\r\n\r\nconst CustomButton = ({ children, isGoogleSignIn, ...otherProps }) => (\r\n  <button\r\n    className={`${isGoogleSignIn ? \"google-sign-in\" : \"\"} custom-button`}\r\n    {...otherProps}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\n\r\nimport \"./sign-in.styles.scss\";\r\n\r\nimport FormInput from \"../form-input/form-input.component\";\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.handleLogin(this.state.email, this.state.password);\r\n    this.setState({ email: \"\", password: \"\" });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sign-in\">\r\n        <h2>I already have an account</h2>\r\n        <span>Sign in with your email and password</span>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormInput\r\n            name=\"email\"\r\n            type=\"email\"\r\n            value={this.state.email}\r\n            label=\"Email\"\r\n            handleChange={this.handleChange}\r\n            required\r\n          />\r\n          <FormInput\r\n            name=\"password\"\r\n            type=\"password\"\r\n            value={this.state.password}\r\n            label=\"Password\"\r\n            handleChange={this.handleChange}\r\n            required\r\n          />\r\n          <div className=\"buttons\">\r\n            <CustomButton type=\"submit\"> Sign in </CustomButton>\r\n            <CustomButton isGoogleSignIn>Sign in with Google</CustomButton>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./loadpage.styles.scss\";\r\n\r\nimport Location from \"../../components/location/location.component\";\r\nimport Time from \"../../components/time/time.component\";\r\nimport SignIn from \"../../components/sign-in/sign-in.component\";\r\nimport defaultImage from \"../../assets/images/flash.jpg\";\r\n\r\nexport default function LoadPage() {\r\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\r\n  var imageUrl = defaultImage;\r\n\r\n  const handleLogin = (email, password) => {\r\n    /* localStorage.setItem(\"email\", email);\r\n    localStorage.setItem(\"password\", password); */\r\n    localStorage.setItem(\"imageUrl\", imageUrl);\r\n    localStorage.setItem(\"user\", email.substr(0, email.indexOf(\"@\")));\r\n    setUser(localStorage.getItem(\"user\"));\r\n  };\r\n\r\n  if (user === null) {\r\n    return (\r\n      <div className=\"loadpage\">\r\n        <SignIn handleLogin={handleLogin} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"loadpage\" style={{ backgroundImage: `url(${imageUrl})` }}>\r\n        <h2 className=\"title\">Welcome {user}</h2>\r\n        <Time />\r\n        <Location url=\"https://api.ipgeolocation.io/ipgeo?apiKey=8fa116c08bf641e9b988b1db30968a52\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport LoadPage from \"./pages/loadpage/loadpage.component\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LoadPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}